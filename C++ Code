#include <iostream>
using namespace std;
#define N 4
// Time Complexity O(N)
// Space Complexity O(N * L)
int lineAssembly(int a[][N+1],int t[][N+1], int e[], int x[], int p[][N+1],
int &L)
{
  int T1[N+1], T2[N+1], i;
  T1[1] = e[1] + a[1][1];
  p[1][1] = 1;
  T2[1] = e[2] + a[2][1];
  p[2][1] = 2;
  for (i = 2; i <= N; i++)
  {
    if (T1[i - 1] + a[1][i] <= T2[i - 1] + t[2][i] + a[1][i])
    {
      T1[i] = T1[i - 1] + a[1][i];
      p[1][i] = 1;
    }
    else
    {
      T1[i] = T2[i - 1] + t[2][i] + a[1][i];
      p[1][i] = 2;
    }
    if (T2[i - 1] + a[2][i] <= T1[i - 1] + t[1][i] + a[2][i])
    {
      T2[i] = T2[i - 1] + a[2][i];
      p[2][i] = 2;
    }
    else
    {
      T2[i] = T1[i - 1] + t[1][i] + a[2][i];
      p[2][i] = 1;
    }
  }
  if ( T1[N] + x[1] <= T2[N] + x[2] )
  {
    L = 1;
    return T1[N] + x[1];
  }
  else
  {
    L = 2;
    return T2[N] + x[2];
  }
}

void print (int p[][N+1], int L, int s)
{
  if (L == 0 || s == 0)
  return;
  print(p, p[L][s], s-1);
  cout << "line " << L << " station " << s << endl;
}
int main()
{
  int L,p[3][N+1];
  int a[][N+1] = {{0,0,0,0,0}, {0, 4, 5, 3, 2}, {0, 2, 10, 1, 4}};
  int t[][N+1] = {{0,0,0,0,0}, {0, 0, 7, 4, 5}, {0, 0, 9, 2, 8}};
  int e[] = {0, 10, 12}, x[] = {0, 18, 7};
  cout << lineAssembly(a, t, e, x, p, L) << endl;
  print(p,L,N);
  return 0;
}
/*
35
line 1 station 1
line 1 station 2
line 2 station 3
line 2 station 4
*/
